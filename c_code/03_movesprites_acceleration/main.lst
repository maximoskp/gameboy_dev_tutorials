                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.3 #11868 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_sprite_data
                                     13 	.globl _joypad
                                     14 	.globl _Smiler
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area _DATA
      000000                         22 _Smiler::
      000000                         23 	.ds 32
                                     24 ;--------------------------------------------------------
                                     25 ; absolute external ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area _DABS (ABS)
                                     28 ;--------------------------------------------------------
                                     29 ; global & static initialisations
                                     30 ;--------------------------------------------------------
                                     31 	.area _HOME
                                     32 	.area _GSINIT
                                     33 	.area _GSFINAL
                                     34 	.area _GSINIT
                                     35 ;SmilerSprites.c:26: unsigned char Smiler[] =
      000000 01r00r00                36 	ld	bc, #_Smiler+0
      000003 59                      37 	ld	e, c
      000004 50                      38 	ld	d, b
      000005 CDr00r00                39 	call	__initrleblock
      000008 20                      40 	.db	#32
      000009 7E 7E FF 81 FF A5 FF    41 	.db	#0x7E, #0x7E, #0xFF, #0x81, #0xFF, #0xA5, #0xFF, #0x81
             81
      000011 FF 81 FF BD FF 81 7E    42 	.db	#0xFF, #0x81, #0xFF, #0xBD, #0xFF, #0x81, #0x7E, #0x7E
             7E
      000019 7E 7E FF 81 FF A5 FF    43 	.db	#0x7E, #0x7E, #0xFF, #0x81, #0xFF, #0xA5, #0xFF, #0x81
             81
      000021 FF A5 FF 99 FF 81 7E    44 	.db	#0xFF, #0xA5, #0xFF, #0x99, #0xFF, #0x81, #0x7E, #0x7E
             7E
      000029 00                      45 	.db	#0
                                     46 ;--------------------------------------------------------
                                     47 ; Home
                                     48 ;--------------------------------------------------------
                                     49 	.area _HOME
                                     50 	.area _HOME
                                     51 ;--------------------------------------------------------
                                     52 ; code
                                     53 ;--------------------------------------------------------
                                     54 	.area _CODE
                                     55 ;main.c:7: void main(){
                                     56 ;	---------------------------------
                                     57 ; Function main
                                     58 ; ---------------------------------
      000000                         59 _main::
      000000 E8 F3                   60 	add	sp, #-13
                                     61 ;main.c:14: UINT16 current_frame = 0;
      000002 AF                      62 	xor	a, a
      000003 F8 05                   63 	ldhl	sp,	#5
      000005 22                      64 	ld	(hl+), a
                                     65 ;main.c:21: UINT16 expanded_x_position = position_divisor*88;
      000006 22                      66 	ld	(hl+), a
      000007 3E 80                   67 	ld	a, #0x80
      000009 22                      68 	ld	(hl+), a
                                     69 ;main.c:22: UINT16 expanded_y_position = position_divisor*78;
      00000A 3E 05                   70 	ld	a, #0x05
      00000C 22                      71 	ld	(hl+), a
      00000D 3E E0                   72 	ld	a, #0xe0
      00000F 22                      73 	ld	(hl+), a
      000010 36 04                   74 	ld	(hl), #0x04
                                     75 ;main.c:25: INT8 x_v = 0;
      000012 AF                      76 	xor	a, a
      000013 23                      77 	inc	hl
      000014 77                      78 	ld	(hl), a
                                     79 ;main.c:26: INT8 y_v = 0;
      000015 AF                      80 	xor	a, a
      000016 23                      81 	inc	hl
      000017 77                      82 	ld	(hl), a
                                     83 ;main.c:32: set_sprite_data(0, 2, Smiler);
      000018 21r00r00                84 	ld	hl, #_Smiler
      00001B E5                      85 	push	hl
      00001C 3E 02                   86 	ld	a, #0x02
      00001E F5                      87 	push	af
      00001F 33                      88 	inc	sp
      000020 AF                      89 	xor	a, a
      000021 F5                      90 	push	af
      000022 33                      91 	inc	sp
      000023 CDr00r00                92 	call	_set_sprite_data
      000026 E8 04                   93 	add	sp, #4
                                     94 ;/Users/max/Documents/gb_dev/gbdk/include/gb/gb.h:610: shadow_OAM[nb].tile=tile; 
      000028 21r02r00                95 	ld	hl, #(_shadow_OAM + 0x0002)
      00002B 36 00                   96 	ld	(hl), #0x00
                                     97 ;/Users/max/Documents/gb_dev/gbdk/include/gb/gb.h:652: OAM_item_t * itm = &shadow_OAM[nb];
      00002D 21r00r00                98 	ld	hl, #_shadow_OAM
                                     99 ;/Users/max/Documents/gb_dev/gbdk/include/gb/gb.h:653: itm->y=y, itm->x=x; 
      000030 3E 4E                  100 	ld	a, #0x4e
      000032 22                     101 	ld	(hl+), a
      000033 36 58                  102 	ld	(hl), #0x58
                                    103 ;main.c:35: SHOW_SPRITES;
      000035 F0r00                  104 	ldh	a, (_LCDC_REG+0)
      000037 F6 02                  105 	or	a, #0x02
      000039 E0r00                  106 	ldh	(_LCDC_REG+0),a
                                    107 ;main.c:37: while(1){
      00003B                        108 00118$:
                                    109 ;main.c:38: if(++current_frame >= frame_to_update_motion){
      00003B F8 05                  110 	ldhl	sp,	#5
      00003D 34                     111 	inc	(hl)
      00003E 20 02                  112 	jr	NZ, 00179$
      000040 23                     113 	inc	hl
      000041 34                     114 	inc	(hl)
      000042                        115 00179$:
      000042 F8 05                  116 	ldhl	sp,	#5
      000044 7E                     117 	ld	a, (hl)
      000045 D6 F4                  118 	sub	a, #0xf4
      000047 23                     119 	inc	hl
      000048 7E                     120 	ld	a, (hl)
      000049 DE 01                  121 	sbc	a, #0x01
      00004B 38 EE                  122 	jr	C, 00118$
                                    123 ;main.c:39: UINT8 joypad_value = joypad();
      00004D CDr00r00               124 	call	_joypad
      000050 F8 00                  125 	ldhl	sp,	#0
      000052 73                     126 	ld	(hl), e
                                    127 ;main.c:40: current_frame = 0;
      000053 AF                     128 	xor	a, a
      000054 F8 05                  129 	ldhl	sp,	#5
      000056 22                     130 	ld	(hl+), a
      000057 77                     131 	ld	(hl), a
                                    132 ;main.c:41: x_a = -1*( (J_LEFT & joypad_value)>>1 ) + (J_RIGHT & joypad_value);
      000058 F8 00                  133 	ldhl	sp,	#0
      00005A 2A                     134 	ld	a, (hl+)
      00005B 77                     135 	ld	(hl), a
      00005C AF                     136 	xor	a, a
      00005D 23                     137 	inc	hl
      00005E 32                     138 	ld	(hl-), a
      00005F 7E                     139 	ld	a, (hl)
      000060 E6 02                  140 	and	a, #0x02
      000062 23                     141 	inc	hl
      000063 23                     142 	inc	hl
      000064 22                     143 	ld	(hl+), a
      000065 3E 00                  144 	ld	a, #0x00
      000067 32                     145 	ld	(hl-), a
      000068 7E                     146 	ld	a, (hl)
      000069 22                     147 	ld	(hl+), a
      00006A 7E                     148 	ld	a, (hl)
      00006B 77                     149 	ld	(hl), a
      00006C CB 3E                  150 	srl	(hl)
      00006E 2B                     151 	dec	hl
      00006F CB 1E                  152 	rr	(hl)
      000071 7E                     153 	ld	a, (hl)
      000072 4F                     154 	ld	c, a
      000073 87                     155 	add	a, a
      000074 81                     156 	add	a, c
      000075 87                     157 	add	a, a
      000076 81                     158 	add	a, c
      000077 87                     159 	add	a, a
      000078 81                     160 	add	a, c
      000079 87                     161 	add	a, a
      00007A 81                     162 	add	a, c
      00007B 87                     163 	add	a, a
      00007C 81                     164 	add	a, c
      00007D 87                     165 	add	a, a
      00007E 81                     166 	add	a, c
      00007F 87                     167 	add	a, a
      000080 81                     168 	add	a, c
      000081 4F                     169 	ld	c, a
      000082 F8 00                  170 	ldhl	sp,	#0
      000084 7E                     171 	ld	a, (hl)
      000085 E6 01                  172 	and	a, #0x01
      000087 81                     173 	add	a, c
      000088 4F                     174 	ld	c, a
                                    175 ;main.c:42: y_a = -1*( (J_UP & joypad_value)>>2 ) + ( (J_DOWN & joypad_value)>>3 );
      000089 23                     176 	inc	hl
      00008A 7E                     177 	ld	a, (hl)
      00008B E6 04                  178 	and	a, #0x04
      00008D 5F                     179 	ld	e, a
      00008E 06 00                  180 	ld	b, #0x00
      000090 CB 38                  181 	srl	b
      000092 CB 1B                  182 	rr	e
      000094 CB 38                  183 	srl	b
      000096 CB 1B                  184 	rr	e
      000098 7B                     185 	ld	a,e
      000099 87                     186 	add	a, a
      00009A 83                     187 	add	a, e
      00009B 87                     188 	add	a, a
      00009C 83                     189 	add	a, e
      00009D 87                     190 	add	a, a
      00009E 83                     191 	add	a, e
      00009F 87                     192 	add	a, a
      0000A0 83                     193 	add	a, e
      0000A1 87                     194 	add	a, a
      0000A2 83                     195 	add	a, e
      0000A3 87                     196 	add	a, a
      0000A4 83                     197 	add	a, e
      0000A5 87                     198 	add	a, a
      0000A6 83                     199 	add	a, e
      0000A7 47                     200 	ld	b, a
      0000A8 F8 01                  201 	ldhl	sp,	#1
      0000AA 7E                     202 	ld	a, (hl)
      0000AB E6 08                  203 	and	a, #0x08
      0000AD 5F                     204 	ld	e, a
      0000AE 16 00                  205 	ld	d, #0x00
      0000B0 CB 3A                  206 	srl	d
      0000B2 CB 1B                  207 	rr	e
      0000B4 CB 3A                  208 	srl	d
      0000B6 CB 1B                  209 	rr	e
      0000B8 CB 3A                  210 	srl	d
      0000BA CB 1B                  211 	rr	e
      0000BC 7B                     212 	ld	a, e
      0000BD 80                     213 	add	a, b
      0000BE F8 04                  214 	ldhl	sp,	#4
      0000C0 77                     215 	ld	(hl), a
                                    216 ;main.c:44: x_v += x_a;
      0000C1 F8 0B                  217 	ldhl	sp,	#11
      0000C3 7E                     218 	ld	a, (hl)
      0000C4 81                     219 	add	a, c
      0000C5 77                     220 	ld	(hl), a
                                    221 ;main.c:45: if(x_v > max_velocity){
      0000C6 5E                     222 	ld	e, (hl)
      0000C7 3E 40                  223 	ld	a,#0x40
      0000C9 57                     224 	ld	d,a
      0000CA 96                     225 	sub	a, (hl)
      0000CB CB 7B                  226 	bit	7, e
      0000CD 28 07                  227 	jr	Z, 00180$
      0000CF CB 7A                  228 	bit	7, d
      0000D1 20 08                  229 	jr	NZ, 00181$
      0000D3 BF                     230 	cp	a, a
      0000D4 18 05                  231 	jr	00181$
      0000D6                        232 00180$:
      0000D6 CB 7A                  233 	bit	7, d
      0000D8 28 01                  234 	jr	Z, 00181$
      0000DA 37                     235 	scf
      0000DB                        236 00181$:
      0000DB 30 04                  237 	jr	NC, 00102$
                                    238 ;main.c:46: x_v = max_velocity;
      0000DD F8 0B                  239 	ldhl	sp,	#11
      0000DF 36 40                  240 	ld	(hl), #0x40
      0000E1                        241 00102$:
                                    242 ;main.c:48: if(x_v < -max_velocity){
      0000E1 F8 0B                  243 	ldhl	sp,	#11
      0000E3 7E                     244 	ld	a, (hl)
      0000E4 4F                     245 	ld	c, a
      0000E5 17                     246 	rla
      0000E6 9F                     247 	sbc	a, a
      0000E7 47                     248 	ld	b, a
      0000E8 79                     249 	ld	a, c
      0000E9 D6 C0                  250 	sub	a, #0xc0
      0000EB 78                     251 	ld	a, b
      0000EC 17                     252 	rla
      0000ED 3F                     253 	ccf
      0000EE 1F                     254 	rra
      0000EF DE 7F                  255 	sbc	a, #0x7f
      0000F1 30 02                  256 	jr	NC, 00104$
                                    257 ;main.c:49: x_v = -max_velocity;
      0000F3 36 C0                  258 	ld	(hl), #0xc0
      0000F5                        259 00104$:
                                    260 ;main.c:51: y_v += y_a;
      0000F5 F8 0C                  261 	ldhl	sp,	#12
      0000F7 7E                     262 	ld	a, (hl)
      0000F8 F8 04                  263 	ldhl	sp,	#4
      0000FA 86                     264 	add	a, (hl)
      0000FB F8 0C                  265 	ldhl	sp,	#12
      0000FD 77                     266 	ld	(hl), a
                                    267 ;main.c:52: if(y_v > max_velocity){
      0000FE 5E                     268 	ld	e, (hl)
      0000FF 3E 40                  269 	ld	a,#0x40
      000101 57                     270 	ld	d,a
      000102 96                     271 	sub	a, (hl)
      000103 CB 7B                  272 	bit	7, e
      000105 28 07                  273 	jr	Z, 00182$
      000107 CB 7A                  274 	bit	7, d
      000109 20 08                  275 	jr	NZ, 00183$
      00010B BF                     276 	cp	a, a
      00010C 18 05                  277 	jr	00183$
      00010E                        278 00182$:
      00010E CB 7A                  279 	bit	7, d
      000110 28 01                  280 	jr	Z, 00183$
      000112 37                     281 	scf
      000113                        282 00183$:
      000113 30 04                  283 	jr	NC, 00106$
                                    284 ;main.c:53: y_v = max_velocity;
      000115 F8 0C                  285 	ldhl	sp,	#12
      000117 36 40                  286 	ld	(hl), #0x40
      000119                        287 00106$:
                                    288 ;main.c:55: if(y_v < -max_velocity){
      000119 F8 0C                  289 	ldhl	sp,	#12
      00011B 7E                     290 	ld	a, (hl)
      00011C 4F                     291 	ld	c, a
      00011D 17                     292 	rla
      00011E 9F                     293 	sbc	a, a
      00011F 47                     294 	ld	b, a
      000120 79                     295 	ld	a, c
      000121 D6 C0                  296 	sub	a, #0xc0
      000123 78                     297 	ld	a, b
      000124 17                     298 	rla
      000125 3F                     299 	ccf
      000126 1F                     300 	rra
      000127 DE 7F                  301 	sbc	a, #0x7f
      000129 30 02                  302 	jr	NC, 00108$
                                    303 ;main.c:56: y_v = -max_velocity;
      00012B 36 C0                  304 	ld	(hl), #0xc0
      00012D                        305 00108$:
                                    306 ;main.c:58: expanded_x_position += x_v;
      00012D F8 0B                  307 	ldhl	sp,	#11
      00012F 7E                     308 	ld	a, (hl)
      000130 4F                     309 	ld	c, a
      000131 17                     310 	rla
      000132 9F                     311 	sbc	a, a
      000133 47                     312 	ld	b, a
      000134 F8 07                  313 	ldhl	sp,	#7
      000136 2A                     314 	ld	a, (hl+)
      000137 66                     315 	ld	h, (hl)
      000138 6F                     316 	ld	l, a
      000139 09                     317 	add	hl, bc
      00013A 7D                     318 	ld	a, l
      00013B 54                     319 	ld	d, h
      00013C F8 07                  320 	ldhl	sp,	#7
      00013E 22                     321 	ld	(hl+), a
      00013F 72                     322 	ld	(hl), d
                                    323 ;main.c:59: actual_x_position = expanded_x_position/position_divisor;
      000140 21 10 00               324 	ld	hl, #0x0010
      000143 E5                     325 	push	hl
      000144 F8 09                  326 	ldhl	sp,	#9
      000146 2A                     327 	ld	a, (hl+)
      000147 66                     328 	ld	h, (hl)
      000148 6F                     329 	ld	l, a
      000149 E5                     330 	push	hl
      00014A CDr00r00               331 	call	__divuint
      00014D E8 04                  332 	add	sp, #4
      00014F F8 03                  333 	ldhl	sp,	#3
      000151 73                     334 	ld	(hl), e
                                    335 ;main.c:60: expanded_y_position += y_v;
      000152 F8 0C                  336 	ldhl	sp,	#12
      000154 7E                     337 	ld	a, (hl)
      000155 4F                     338 	ld	c, a
      000156 17                     339 	rla
      000157 9F                     340 	sbc	a, a
      000158 47                     341 	ld	b, a
      000159 F8 09                  342 	ldhl	sp,	#9
      00015B 2A                     343 	ld	a, (hl+)
      00015C 66                     344 	ld	h, (hl)
      00015D 6F                     345 	ld	l, a
      00015E 09                     346 	add	hl, bc
      00015F 7D                     347 	ld	a, l
      000160 54                     348 	ld	d, h
      000161 F8 09                  349 	ldhl	sp,	#9
      000163 22                     350 	ld	(hl+), a
      000164 72                     351 	ld	(hl), d
                                    352 ;main.c:61: actual_y_position = expanded_y_position/position_divisor;
      000165 21 10 00               353 	ld	hl, #0x0010
      000168 E5                     354 	push	hl
      000169 F8 0B                  355 	ldhl	sp,	#11
      00016B 2A                     356 	ld	a, (hl+)
      00016C 66                     357 	ld	h, (hl)
      00016D 6F                     358 	ld	l, a
      00016E E5                     359 	push	hl
      00016F CDr00r00               360 	call	__divuint
      000172 E8 04                  361 	add	sp, #4
      000174 F8 04                  362 	ldhl	sp,	#4
      000176 73                     363 	ld	(hl), e
                                    364 ;main.c:63: if(actual_x_position <= wall_left || actual_x_position >= wall_right){
      000177 3E 08                  365 	ld	a, #0x08
      000179 2B                     366 	dec	hl
      00017A 96                     367 	sub	a, (hl)
      00017B 3E 00                  368 	ld	a, #0x00
      00017D 17                     369 	rla
      00017E 4F                     370 	ld	c, a
      00017F CB 41                  371 	bit	0, c
      000181 28 05                  372 	jr	Z, 00109$
      000183 7E                     373 	ld	a, (hl)
      000184 D6 A0                  374 	sub	a, #0xa0
      000186 38 10                  375 	jr	C, 00110$
      000188                        376 00109$:
                                    377 ;main.c:64: x_v = -x_v;
      000188 AF                     378 	xor	a, a
      000189 F8 0B                  379 	ldhl	sp,	#11
      00018B 96                     380 	sub	a, (hl)
      00018C 77                     381 	ld	(hl), a
                                    382 ;main.c:65: actual_x_position = actual_x_position <= wall_left ? wall_left : wall_right;
      00018D CB 41                  383 	bit	0, c
      00018F 3E 08                  384 	ld	a, #0x08
      000191 28 02                  385 	jr	Z, 00126$
      000193 3E A0                  386 	ld	a, #0xa0
      000195                        387 00126$:
      000195 F8 03                  388 	ldhl	sp,	#3
      000197 77                     389 	ld	(hl), a
      000198                        390 00110$:
                                    391 ;main.c:67: if(actual_y_position <= wall_up || actual_y_position >= wall_down){
      000198 3E 10                  392 	ld	a, #0x10
      00019A F8 04                  393 	ldhl	sp,	#4
      00019C 96                     394 	sub	a, (hl)
      00019D 3E 00                  395 	ld	a, #0x00
      00019F 17                     396 	rla
      0001A0 4F                     397 	ld	c, a
      0001A1 CB 41                  398 	bit	0, c
      0001A3 28 05                  399 	jr	Z, 00112$
      0001A5 7E                     400 	ld	a, (hl)
      0001A6 D6 98                  401 	sub	a, #0x98
      0001A8 38 10                  402 	jr	C, 00113$
      0001AA                        403 00112$:
                                    404 ;main.c:68: y_v = -y_v;
      0001AA AF                     405 	xor	a, a
      0001AB F8 0C                  406 	ldhl	sp,	#12
      0001AD 96                     407 	sub	a, (hl)
      0001AE 77                     408 	ld	(hl), a
                                    409 ;main.c:69: actual_y_position = actual_y_position <= wall_up ? wall_up : wall_down;
      0001AF CB 41                  410 	bit	0, c
      0001B1 3E 10                  411 	ld	a, #0x10
      0001B3 28 02                  412 	jr	Z, 00128$
      0001B5 3E 98                  413 	ld	a, #0x98
      0001B7                        414 00128$:
      0001B7 F8 04                  415 	ldhl	sp,	#4
      0001B9 77                     416 	ld	(hl), a
      0001BA                        417 00113$:
                                    418 ;/Users/max/Documents/gb_dev/gbdk/include/gb/gb.h:652: OAM_item_t * itm = &shadow_OAM[nb];
      0001BA 01r00r00               419 	ld	bc, #_shadow_OAM
                                    420 ;/Users/max/Documents/gb_dev/gbdk/include/gb/gb.h:653: itm->y=y, itm->x=x; 
      0001BD F8 04                  421 	ldhl	sp,	#4
      0001BF 7E                     422 	ld	a, (hl)
      0001C0 02                     423 	ld	(bc), a
      0001C1 03                     424 	inc	bc
      0001C2 2B                     425 	dec	hl
      0001C3 7E                     426 	ld	a, (hl)
      0001C4 02                     427 	ld	(bc), a
                                    428 ;main.c:71: move_sprite(0, actual_x_position, actual_y_position);
      0001C5 C3r3Br00               429 	jp	00118$
                                    430 ;main.c:74: }
      0001C8 E8 0D                  431 	add	sp, #13
      0001CA C9                     432 	ret
                                    433 	.area _CODE
                                    434 	.area _CABS (ABS)

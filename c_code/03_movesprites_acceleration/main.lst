                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_sprite_data
                                     13 	.globl _joypad
                                     14 	.globl _Smiler
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area _DATA
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area _INITIALIZED
      000000                         26 _Smiler::
      000000                         27 	.ds 32
                                     28 ;--------------------------------------------------------
                                     29 ; absolute external ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area _DABS (ABS)
                                     32 ;--------------------------------------------------------
                                     33 ; global & static initialisations
                                     34 ;--------------------------------------------------------
                                     35 	.area _HOME
                                     36 	.area _GSINIT
                                     37 	.area _GSFINAL
                                     38 	.area _GSINIT
                                     39 ;--------------------------------------------------------
                                     40 ; Home
                                     41 ;--------------------------------------------------------
                                     42 	.area _HOME
                                     43 	.area _HOME
                                     44 ;--------------------------------------------------------
                                     45 ; code
                                     46 ;--------------------------------------------------------
                                     47 	.area _CODE
                                     48 ;main.c:7: void main(void){
                                     49 ;	---------------------------------
                                     50 ; Function main
                                     51 ; ---------------------------------
      000000                         52 _main::
      000000 E8 F3            [16]   53 	add	sp, #-13
                                     54 ;main.c:14: uint16_t current_frame = 0;
      000002 AF               [ 4]   55 	xor	a, a
      000003 F8 09            [12]   56 	ldhl	sp,	#9
      000005 22               [ 8]   57 	ld	(hl+), a
      000006 77               [ 8]   58 	ld	(hl), a
                                     59 ;main.c:21: uint16_t expanded_x_position = position_divisor*88;
      000007 F8 00            [12]   60 	ldhl	sp,	#0
      000009 3E 80            [ 8]   61 	ld	a, #0x80
      00000B 22               [ 8]   62 	ld	(hl+), a
                                     63 ;main.c:22: uint16_t expanded_y_position = position_divisor*78;
      00000C 3E 05            [ 8]   64 	ld	a, #0x05
      00000E 22               [ 8]   65 	ld	(hl+), a
      00000F 3E E0            [ 8]   66 	ld	a, #0xe0
      000011 22               [ 8]   67 	ld	(hl+), a
      000012 36 04            [12]   68 	ld	(hl), #0x04
                                     69 ;main.c:25: int8_t x_v = 0;
      000014 F8 0B            [12]   70 	ldhl	sp,	#11
                                     71 ;main.c:26: int8_t y_v = 0;
      000016 AF               [ 4]   72 	xor	a, a
      000017 22               [ 8]   73 	ld	(hl+), a
      000018 77               [ 8]   74 	ld	(hl), a
                                     75 ;main.c:32: set_sprite_data(0, 2, Smiler);
      000019 11r00r00         [12]   76 	ld	de, #_Smiler
      00001C D5               [16]   77 	push	de
      00001D 21 00 02         [12]   78 	ld	hl, #0x200
      000020 E5               [16]   79 	push	hl
      000021 CDr00r00         [24]   80 	call	_set_sprite_data
      000024 E8 04            [16]   81 	add	sp, #4
                                     82 ;/Users/max/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      000026 21r02r00         [12]   83 	ld	hl, #(_shadow_OAM + 2)
      000029 36 00            [12]   84 	ld	(hl), #0x00
                                     85 ;/Users/max/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      00002B 21r00r00         [12]   86 	ld	hl, #_shadow_OAM
                                     87 ;/Users/max/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      00002E 3E 4E            [ 8]   88 	ld	a, #0x4e
      000030 22               [ 8]   89 	ld	(hl+), a
      000031 36 58            [12]   90 	ld	(hl), #0x58
                                     91 ;main.c:35: SHOW_SPRITES;
      000033 F0r00            [12]   92 	ldh	a, (_LCDC_REG + 0)
      000035 F6 02            [ 8]   93 	or	a, #0x02
      000037 E0r00            [12]   94 	ldh	(_LCDC_REG + 0), a
                                     95 ;main.c:37: while(1){
      000039                         96 00118$:
                                     97 ;main.c:38: if(++current_frame >= frame_to_update_motion){
      000039 F8 09            [12]   98 	ldhl	sp,	#9
      00003B 34               [12]   99 	inc	(hl)
      00003C 20 02            [12]  100 	jr	NZ, 00199$
      00003E 23               [ 8]  101 	inc	hl
      00003F 34               [12]  102 	inc	(hl)
      000040                        103 00199$:
      000040 F8 09            [12]  104 	ldhl	sp,	#9
      000042 2A               [ 8]  105 	ld	a, (hl+)
      000043 D6 F4            [ 8]  106 	sub	a, #0xf4
      000045 7E               [ 8]  107 	ld	a, (hl)
      000046 DE 01            [ 8]  108 	sbc	a, #0x01
      000048 38 EF            [12]  109 	jr	C, 00118$
                                    110 ;main.c:39: uint8_t joypad_value = joypad();
      00004A CDr00r00         [24]  111 	call	_joypad
      00004D F8 04            [12]  112 	ldhl	sp,	#4
      00004F 77               [ 8]  113 	ld	(hl), a
                                    114 ;main.c:40: current_frame = 0;
      000050 AF               [ 4]  115 	xor	a, a
      000051 F8 09            [12]  116 	ldhl	sp,	#9
      000053 22               [ 8]  117 	ld	(hl+), a
      000054 77               [ 8]  118 	ld	(hl), a
                                    119 ;main.c:41: x_a = -1*( (J_LEFT & joypad_value)>>1 ) + (J_RIGHT & joypad_value);
      000055 F8 04            [12]  120 	ldhl	sp,	#4
      000057 2A               [ 8]  121 	ld	a, (hl+)
      000058 22               [ 8]  122 	ld	(hl+), a
      000059 AF               [ 4]  123 	xor	a, a
      00005A 32               [ 8]  124 	ld	(hl-), a
      00005B 2A               [ 8]  125 	ld	a, (hl+)
      00005C 23               [ 8]  126 	inc	hl
      00005D E6 02            [ 8]  127 	and	a, #0x02
      00005F 22               [ 8]  128 	ld	(hl+), a
      000060 36 00            [12]  129 	ld	(hl), #0x00
      000062 CB 3E            [16]  130 	srl	(hl)
      000064 2B               [ 8]  131 	dec	hl
      000065 CB 1E            [16]  132 	rr	(hl)
      000067 7E               [ 8]  133 	ld	a, (hl)
      000068 4F               [ 4]  134 	ld	c, a
      000069 87               [ 4]  135 	add	a, a
      00006A 87               [ 4]  136 	add	a, a
      00006B 87               [ 4]  137 	add	a, a
      00006C 87               [ 4]  138 	add	a, a
      00006D 87               [ 4]  139 	add	a, a
      00006E 87               [ 4]  140 	add	a, a
      00006F 87               [ 4]  141 	add	a, a
      000070 87               [ 4]  142 	add	a, a
      000071 91               [ 4]  143 	sub	a, c
      000072 4F               [ 4]  144 	ld	c, a
      000073 F8 04            [12]  145 	ldhl	sp,	#4
                                    146 ;main.c:42: y_a = -1*( (J_UP & joypad_value)>>2 ) + ( (J_DOWN & joypad_value)>>3 );
      000075 2A               [ 8]  147 	ld	a, (hl+)
      000076 E6 01            [ 8]  148 	and	a, #0x01
      000078 81               [ 4]  149 	add	a, c
      000079 4F               [ 4]  150 	ld	c, a
      00007A 7E               [ 8]  151 	ld	a, (hl)
      00007B E6 04            [ 8]  152 	and	a, #0x04
      00007D 5F               [ 4]  153 	ld	e, a
      00007E 16 00            [ 8]  154 	ld	d, #0x00
      000080 CB 3A            [ 8]  155 	srl	d
      000082 CB 1B            [ 8]  156 	rr	e
      000084 CB 3A            [ 8]  157 	srl	d
      000086 CB 1B            [ 8]  158 	rr	e
      000088 7B               [ 4]  159 	ld	a,e
      000089 87               [ 4]  160 	add	a, a
      00008A 87               [ 4]  161 	add	a, a
      00008B 87               [ 4]  162 	add	a, a
      00008C 87               [ 4]  163 	add	a, a
      00008D 87               [ 4]  164 	add	a, a
      00008E 87               [ 4]  165 	add	a, a
      00008F 87               [ 4]  166 	add	a, a
      000090 87               [ 4]  167 	add	a, a
      000091 93               [ 4]  168 	sub	a, e
      000092 47               [ 4]  169 	ld	b, a
      000093 7E               [ 8]  170 	ld	a, (hl)
      000094 E6 08            [ 8]  171 	and	a, #0x08
      000096 5F               [ 4]  172 	ld	e, a
      000097 16 00            [ 8]  173 	ld	d, #0x00
      000099 CB 3A            [ 8]  174 	srl	d
      00009B CB 1B            [ 8]  175 	rr	e
      00009D CB 3A            [ 8]  176 	srl	d
      00009F CB 1B            [ 8]  177 	rr	e
      0000A1 CB 3A            [ 8]  178 	srl	d
      0000A3 CB 1B            [ 8]  179 	rr	e
      0000A5 7B               [ 4]  180 	ld	a, e
      0000A6 80               [ 4]  181 	add	a, b
      0000A7 F8 08            [12]  182 	ldhl	sp,	#8
      0000A9 77               [ 8]  183 	ld	(hl), a
                                    184 ;main.c:44: x_v += x_a;
      0000AA F8 0B            [12]  185 	ldhl	sp,	#11
      0000AC 7E               [ 8]  186 	ld	a, (hl)
      0000AD 81               [ 4]  187 	add	a, c
      0000AE 77               [ 8]  188 	ld	(hl), a
                                    189 ;main.c:45: if(x_v > max_velocity){
      0000AF 5E               [ 8]  190 	ld	e, (hl)
      0000B0 3E 40            [ 8]  191 	ld	a,#0x40
      0000B2 57               [ 4]  192 	ld	d,a
      0000B3 96               [ 8]  193 	sub	a, (hl)
      0000B4 CB 7B            [ 8]  194 	bit	7, e
      0000B6 28 07            [12]  195 	jr	Z, 00200$
      0000B8 CB 7A            [ 8]  196 	bit	7, d
      0000BA 20 08            [12]  197 	jr	NZ, 00201$
      0000BC BF               [ 4]  198 	cp	a, a
      0000BD 18 05            [12]  199 	jr	00201$
      0000BF                        200 00200$:
      0000BF CB 7A            [ 8]  201 	bit	7, d
      0000C1 28 01            [12]  202 	jr	Z, 00201$
      0000C3 37               [ 4]  203 	scf
      0000C4                        204 00201$:
      0000C4 30 04            [12]  205 	jr	NC, 00102$
                                    206 ;main.c:46: x_v = max_velocity;
      0000C6 F8 0B            [12]  207 	ldhl	sp,	#11
      0000C8 36 40            [12]  208 	ld	(hl), #0x40
      0000CA                        209 00102$:
                                    210 ;main.c:48: if(x_v < -max_velocity){
      0000CA F8 0B            [12]  211 	ldhl	sp,	#11
      0000CC 7E               [ 8]  212 	ld	a, (hl)
      0000CD 4F               [ 4]  213 	ld	c, a
      0000CE 07               [ 4]  214 	rlca
      0000CF 9F               [ 4]  215 	sbc	a, a
      0000D0 47               [ 4]  216 	ld	b, a
      0000D1 79               [ 4]  217 	ld	a, c
      0000D2 D6 C0            [ 8]  218 	sub	a, #0xc0
      0000D4 78               [ 4]  219 	ld	a, b
      0000D5 17               [ 4]  220 	rla
      0000D6 3F               [ 4]  221 	ccf
      0000D7 1F               [ 4]  222 	rra
      0000D8 DE 7F            [ 8]  223 	sbc	a, #0x7f
      0000DA 30 02            [12]  224 	jr	NC, 00104$
                                    225 ;main.c:49: x_v = -max_velocity;
      0000DC 36 C0            [12]  226 	ld	(hl), #0xc0
      0000DE                        227 00104$:
                                    228 ;main.c:51: y_v += y_a;
      0000DE F8 0C            [12]  229 	ldhl	sp,	#12
      0000E0 7E               [ 8]  230 	ld	a, (hl)
      0000E1 F8 08            [12]  231 	ldhl	sp,	#8
      0000E3 86               [ 8]  232 	add	a, (hl)
      0000E4 F8 0C            [12]  233 	ldhl	sp,	#12
      0000E6 77               [ 8]  234 	ld	(hl), a
                                    235 ;main.c:52: if(y_v > max_velocity){
      0000E7 5E               [ 8]  236 	ld	e, (hl)
      0000E8 3E 40            [ 8]  237 	ld	a,#0x40
      0000EA 57               [ 4]  238 	ld	d,a
      0000EB 96               [ 8]  239 	sub	a, (hl)
      0000EC CB 7B            [ 8]  240 	bit	7, e
      0000EE 28 07            [12]  241 	jr	Z, 00202$
      0000F0 CB 7A            [ 8]  242 	bit	7, d
      0000F2 20 08            [12]  243 	jr	NZ, 00203$
      0000F4 BF               [ 4]  244 	cp	a, a
      0000F5 18 05            [12]  245 	jr	00203$
      0000F7                        246 00202$:
      0000F7 CB 7A            [ 8]  247 	bit	7, d
      0000F9 28 01            [12]  248 	jr	Z, 00203$
      0000FB 37               [ 4]  249 	scf
      0000FC                        250 00203$:
      0000FC 30 04            [12]  251 	jr	NC, 00106$
                                    252 ;main.c:53: y_v = max_velocity;
      0000FE F8 0C            [12]  253 	ldhl	sp,	#12
      000100 36 40            [12]  254 	ld	(hl), #0x40
      000102                        255 00106$:
                                    256 ;main.c:55: if(y_v < -max_velocity){
      000102 F8 0C            [12]  257 	ldhl	sp,	#12
      000104 7E               [ 8]  258 	ld	a, (hl)
      000105 4F               [ 4]  259 	ld	c, a
      000106 07               [ 4]  260 	rlca
      000107 9F               [ 4]  261 	sbc	a, a
      000108 47               [ 4]  262 	ld	b, a
      000109 79               [ 4]  263 	ld	a, c
      00010A D6 C0            [ 8]  264 	sub	a, #0xc0
      00010C 78               [ 4]  265 	ld	a, b
      00010D 17               [ 4]  266 	rla
      00010E 3F               [ 4]  267 	ccf
      00010F 1F               [ 4]  268 	rra
      000110 DE 7F            [ 8]  269 	sbc	a, #0x7f
      000112 30 02            [12]  270 	jr	NC, 00108$
                                    271 ;main.c:56: y_v = -max_velocity;
      000114 36 C0            [12]  272 	ld	(hl), #0xc0
      000116                        273 00108$:
                                    274 ;main.c:58: expanded_x_position += x_v;
      000116 F8 0B            [12]  275 	ldhl	sp,	#11
      000118 7E               [ 8]  276 	ld	a, (hl)
      000119 5F               [ 4]  277 	ld	e, a
      00011A 07               [ 4]  278 	rlca
      00011B 9F               [ 4]  279 	sbc	a, a
      00011C 57               [ 4]  280 	ld	d, a
      00011D F8 00            [12]  281 	ldhl	sp,	#0
      00011F 2A               [ 8]  282 	ld	a, (hl+)
      000120 46               [ 8]  283 	ld	b, (hl)
      000121 2B               [ 8]  284 	dec	hl
      000122 83               [ 4]  285 	add	a, e
      000123 4F               [ 4]  286 	ld	c, a
      000124 78               [ 4]  287 	ld	a, b
      000125 8A               [ 4]  288 	adc	a, d
      000126 71               [ 8]  289 	ld	(hl), c
      000127 23               [ 8]  290 	inc	hl
      000128 77               [ 8]  291 	ld	(hl), a
                                    292 ;main.c:59: actual_x_position = expanded_x_position/position_divisor;
      000129 01 10 00         [12]  293 	ld	bc, #0x0010
      00012C D1               [12]  294 	pop	de
      00012D D5               [16]  295 	push	de
      00012E CDr00r00         [24]  296 	call	__divuint
      000131 F8 08            [12]  297 	ldhl	sp,	#8
      000133 71               [ 8]  298 	ld	(hl), c
                                    299 ;main.c:60: expanded_y_position += y_v;
      000134 F8 0C            [12]  300 	ldhl	sp,	#12
      000136 7E               [ 8]  301 	ld	a, (hl)
      000137 5F               [ 4]  302 	ld	e, a
      000138 07               [ 4]  303 	rlca
      000139 9F               [ 4]  304 	sbc	a, a
      00013A 57               [ 4]  305 	ld	d, a
      00013B F8 02            [12]  306 	ldhl	sp,	#2
      00013D 2A               [ 8]  307 	ld	a, (hl+)
      00013E 46               [ 8]  308 	ld	b, (hl)
      00013F 2B               [ 8]  309 	dec	hl
      000140 83               [ 4]  310 	add	a, e
      000141 4F               [ 4]  311 	ld	c, a
      000142 78               [ 4]  312 	ld	a, b
      000143 8A               [ 4]  313 	adc	a, d
      000144 71               [ 8]  314 	ld	(hl), c
      000145 23               [ 8]  315 	inc	hl
                                    316 ;main.c:61: actual_y_position = expanded_y_position/position_divisor;
      000146 32               [ 8]  317 	ld	(hl-), a
      000147 01 10 00         [12]  318 	ld	bc, #0x0010
      00014A 2A               [ 8]  319 	ld	a, (hl+)
      00014B 5F               [ 4]  320 	ld	e, a
      00014C 56               [ 8]  321 	ld	d, (hl)
      00014D CDr00r00         [24]  322 	call	__divuint
      000150 F8 07            [12]  323 	ldhl	sp,	#7
                                    324 ;main.c:63: if(actual_x_position <= wall_left || actual_x_position >= wall_right){
      000152 79               [ 4]  325 	ld	a, c
      000153 22               [ 8]  326 	ld	(hl+), a
      000154 3E 08            [ 8]  327 	ld	a, #0x08
      000156 96               [ 8]  328 	sub	a, (hl)
      000157 3E 00            [ 8]  329 	ld	a, #0x00
      000159 17               [ 4]  330 	rla
      00015A 4F               [ 4]  331 	ld	c, a
      00015B CB 41            [ 8]  332 	bit	0, c
      00015D 28 05            [12]  333 	jr	Z, 00109$
      00015F 7E               [ 8]  334 	ld	a, (hl)
      000160 D6 A0            [ 8]  335 	sub	a, #0xa0
      000162 38 13            [12]  336 	jr	C, 00110$
      000164                        337 00109$:
                                    338 ;main.c:64: x_v = -x_v;
      000164 AF               [ 4]  339 	xor	a, a
      000165 F8 0B            [12]  340 	ldhl	sp,	#11
      000167 96               [ 8]  341 	sub	a, (hl)
      000168 77               [ 8]  342 	ld	(hl), a
                                    343 ;main.c:65: actual_x_position = actual_x_position <= wall_left ? wall_left : wall_right;
      000169 CB 41            [ 8]  344 	bit	0, c
      00016B 20 06            [12]  345 	jr	NZ, 00125$
      00016D F8 08            [12]  346 	ldhl	sp,	#8
      00016F 36 08            [12]  347 	ld	(hl), #0x08
      000171 18 04            [12]  348 	jr	00126$
      000173                        349 00125$:
      000173 F8 08            [12]  350 	ldhl	sp,	#8
      000175 36 A0            [12]  351 	ld	(hl), #0xa0
      000177                        352 00126$:
      000177                        353 00110$:
                                    354 ;main.c:67: if(actual_y_position <= wall_up || actual_y_position >= wall_down){
      000177 3E 10            [ 8]  355 	ld	a, #0x10
      000179 F8 07            [12]  356 	ldhl	sp,	#7
      00017B 96               [ 8]  357 	sub	a, (hl)
      00017C 3E 00            [ 8]  358 	ld	a, #0x00
      00017E 17               [ 4]  359 	rla
      00017F 4F               [ 4]  360 	ld	c, a
      000180 CB 41            [ 8]  361 	bit	0, c
      000182 28 05            [12]  362 	jr	Z, 00112$
      000184 7E               [ 8]  363 	ld	a, (hl)
      000185 D6 98            [ 8]  364 	sub	a, #0x98
      000187 38 10            [12]  365 	jr	C, 00113$
      000189                        366 00112$:
                                    367 ;main.c:68: y_v = -y_v;
      000189 AF               [ 4]  368 	xor	a, a
      00018A F8 0C            [12]  369 	ldhl	sp,	#12
      00018C 96               [ 8]  370 	sub	a, (hl)
      00018D 77               [ 8]  371 	ld	(hl), a
                                    372 ;main.c:69: actual_y_position = actual_y_position <= wall_up ? wall_up : wall_down;
      00018E CB 41            [ 8]  373 	bit	0, c
      000190 3E 10            [ 8]  374 	ld	a, #0x10
      000192 28 02            [12]  375 	jr	Z, 00128$
      000194 3E 98            [ 8]  376 	ld	a, #0x98
      000196                        377 00128$:
      000196 F8 07            [12]  378 	ldhl	sp,	#7
      000198 77               [ 8]  379 	ld	(hl), a
      000199                        380 00113$:
                                    381 ;/Users/max/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      000199 01r00r00         [12]  382 	ld	bc, #_shadow_OAM
                                    383 ;/Users/max/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      00019C F8 07            [12]  384 	ldhl	sp,	#7
      00019E 2A               [ 8]  385 	ld	a, (hl+)
      00019F 02               [ 8]  386 	ld	(bc), a
      0001A0 03               [ 8]  387 	inc	bc
      0001A1 7E               [ 8]  388 	ld	a, (hl)
      0001A2 02               [ 8]  389 	ld	(bc), a
                                    390 ;main.c:71: move_sprite(0, actual_x_position, actual_y_position);
      0001A3 C3r39r00         [16]  391 	jp	00118$
                                    392 ;main.c:74: }
      0001A6 E8 0D            [16]  393 	add	sp, #13
      0001A8 C9               [16]  394 	ret
                                    395 	.area _CODE
                                    396 	.area _INITIALIZER
      000000                        397 __xinit__Smiler:
      000000 7E                     398 	.db #0x7e	; 126
      000001 7E                     399 	.db #0x7e	; 126
      000002 FF                     400 	.db #0xff	; 255
      000003 81                     401 	.db #0x81	; 129
      000004 FF                     402 	.db #0xff	; 255
      000005 A5                     403 	.db #0xa5	; 165
      000006 FF                     404 	.db #0xff	; 255
      000007 81                     405 	.db #0x81	; 129
      000008 FF                     406 	.db #0xff	; 255
      000009 81                     407 	.db #0x81	; 129
      00000A FF                     408 	.db #0xff	; 255
      00000B BD                     409 	.db #0xbd	; 189
      00000C FF                     410 	.db #0xff	; 255
      00000D 81                     411 	.db #0x81	; 129
      00000E 7E                     412 	.db #0x7e	; 126
      00000F 7E                     413 	.db #0x7e	; 126
      000010 7E                     414 	.db #0x7e	; 126
      000011 7E                     415 	.db #0x7e	; 126
      000012 FF                     416 	.db #0xff	; 255
      000013 81                     417 	.db #0x81	; 129
      000014 FF                     418 	.db #0xff	; 255
      000015 A5                     419 	.db #0xa5	; 165
      000016 FF                     420 	.db #0xff	; 255
      000017 81                     421 	.db #0x81	; 129
      000018 FF                     422 	.db #0xff	; 255
      000019 A5                     423 	.db #0xa5	; 165
      00001A FF                     424 	.db #0xff	; 255
      00001B 99                     425 	.db #0x99	; 153
      00001C FF                     426 	.db #0xff	; 255
      00001D 81                     427 	.db #0x81	; 129
      00001E 7E                     428 	.db #0x7e	; 126
      00001F 7E                     429 	.db #0x7e	; 126
                                    430 	.area _CABS (ABS)
